using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using Newtonsoft.Json;
using Qlik.Engine;
using Qlik.Sense.Client;


namespace QlikSenseLoopandReduce
{
    class QlikSenseJSONHelper
    {
        //QRSWebClient qrsClient;
        QRSNTLMWebClient qrsClient;
        string url;



        public QlikSenseJSONHelper(string url)
        {
            this.url = url;
            //qrsClient = new QRSWebClient(url+":4242");
            qrsClient = new QRSNTLMWebClient(url);
        }

        public string GetAppID(string appname)
        {
            Dictionary<string, string> appqueries = new Dictionary<string, string>();
            appqueries.Add("filter", "name eq '" + appname + "'");

            //find the app
            string appid = "";
            string appsstring = qrsClient.Get("/qrs/app", appqueries);
            List<app> apps = (List<app>)JsonConvert.DeserializeObject<List<app>>(appsstring);
            for (int i = 0; i < apps.Count; i++)
            {
                if (apps[i].name == appname)
                {
                    appid = apps[i].ID;
                    
                }
            }

            if (appid == "")
            {
                throw new Exception("Couldn't find app");
            }
            return appid;
        }

        public string GetStreamID(string streamname)
        {
            Dictionary<string, string> streamqueries = new Dictionary<string, string>();
            streamqueries.Add("filter", "name eq '" + streamname + "'");

            //find the stream
            string streamid = "";
            string streamstring = qrsClient.Get("/qrs/stream", streamqueries);
            List<stream> streams = (List<stream>)JsonConvert.DeserializeObject<List<stream>>(streamstring);
            for (int i = 0; i < streams.Count; i++)
            {
                if (streams[i].name == streamname)
                {
                    streamid = streams[i].ID;

                }
            }

            if (streamid == "")
            {
                throw new Exception("Couldn't find stream");
            }
            return streamid;
        }

        public app GetApp(string appname)
        {
            Dictionary<string, string> appqueries = new Dictionary<string, string>();
            appqueries.Add("filter", "name eq '" + appname + "'");

            //find the app
            string appsstring = qrsClient.Get("/qrs/app", appqueries);
            List<app> apps = (List<app>)JsonConvert.DeserializeObject<List<app>>(appsstring);
            for (int i = 0; i < apps.Count; i++)
            {
                if (apps[i].name == appname)
                {
                    return apps[i];
                }
            }

            return null;
        }

        public string CopyAndModifyApp(string appid, string name, CustomProperty LoopProperty, string loopvalue, string script)
        {
            Dictionary<string, string> queries = new Dictionary<string, string>();
            queries.Add("name", name);
            string copyresult = qrsClient.Post("/qrs/app/" + appid + "/copy", "", queries);
            
            app newapp = (app)JsonConvert.DeserializeObject<app>(copyresult);


            //Sleep for 1 second, then GET the app again (handles updates to modified date during copy) 
            Thread.Sleep(1000);
            newapp = (app)JsonConvert.DeserializeObject<app>(qrsClient.Get("/qrs/app/" + newapp.ID));

            //Apply tag & custom property
            newapp.tags.Add(addTag("generated by LR"));           
            
            CustomPropertyApplied newcp = new CustomPropertyApplied();
            newcp.value = loopvalue;
            newcp.definition = LoopProperty;

            newapp.customproperties = new List<CustomPropertyApplied>();
            newapp.customproperties.Add(newcp);

            //update it
            qrsClient.Put("/qrs/app/" + newapp.ID, JsonConvert.SerializeObject(newapp, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }));


            //now modify its script
            SetLoopAndReduceScript(newapp.ID, loopvalue, script);

            return newapp.ID;
        }


        public CustomProperty addCustomProperty(string name, List<string> values)
        {

            CustomProperty newCP = new CustomProperty();
            string result;

            //Check if a tag with this name already exists
            Dictionary<string, string> filter = new Dictionary<string, string>();
            filter.Add("filter", "name eq '" + name + "'");
            result = qrsClient.Get("/qrs/custompropertydefinition/full", filter);
            List<CustomProperty> existingCP = JsonConvert.DeserializeObject<List<CustomProperty>>(result);

            //build the option list
            List<string> CPvalues = new List<string>();

            for (int i = 0; i < values.Count;i++ )
            {
                CPvalues.Add(values[i]);
            }


            if (existingCP.Count > 0)
            {
                //if exists then update it
                newCP = existingCP[0];
                newCP.choiceValues = CPvalues.ToArray();
                result = qrsClient.Put("/qrs/custompropertydefinition/"+newCP.ID, JsonConvert.SerializeObject(newCP, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }));
            }
            else
            {
                //if not then add it
                newCP.name = name;
                newCP.choiceValues = CPvalues.ToArray();
                newCP.objectTypes = new string[] { "App" };

                result = qrsClient.Post("/qrs/custompropertydefinition", JsonConvert.SerializeObject(newCP, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }));
                newCP = JsonConvert.DeserializeObject<CustomProperty>(result);
            }

            return newCP;
        }

        public tag addTag(string name)
        {
            tag newTag = new tag();
            string result;
            
            //Check if a tag with this name already exists
            Dictionary<string, string> filter = new Dictionary<string, string>();
            filter.Add("filter", "name eq '" + name + "'");
            result = qrsClient.Get("/qrs/tag", filter);
            List<tag> existingtags = JsonConvert.DeserializeObject<List<tag>>(result);

            
            if (existingtags.Count > 0)
            {
                //if it exists then return it
                newTag = existingtags[0];
            }
            else
            {
                //if not then add it and return it
                newTag.name = name;
                result = qrsClient.Post("/qrs/tag", JsonConvert.SerializeObject(newTag, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }));
                newTag = JsonConvert.DeserializeObject<tag>(result);
            }

            return newTag;
        }


        public void Reload(string appid)
        {
            qrsClient.Post("/qrs/app/" + appid + "/reload", "");
        }

        public string StartTask(string taskid)
        {
            string result;
            result = qrsClient.Post("/qrs/task/" + taskid + "/start/synchronous", "");
            taskstartresult startresult = JsonConvert.DeserializeObject<taskstartresult>(result);
            return startresult.value;
        }

        public int checkprogress(string executionid)
        {
            Dictionary<string, string> filter = new Dictionary<string, string>();
            filter.Add("filter", "ExecutionID eq " + executionid);

            string checkexec;
            List<executionresult> execresult = new List<executionresult>();

            checkexec = qrsClient.Get("/qrs/executionresult/full", filter);
            execresult = JsonConvert.DeserializeObject<List<executionresult>>(checkexec);


            return execresult[0].status;

        }

        public void Publish(string appid, string streamid)
        {
                Dictionary<string, string> appqueries = new Dictionary<string, string>();
                appqueries.Add("stream", streamid);

                qrsClient.Put("/qrs/app/" + appid + "/publish", appqueries);
        }

        public void Replace(string newappid, string oldappid)
        {
                Dictionary<string, string> appqueries = new Dictionary<string, string>();
                appqueries.Add("app", oldappid);
                string result = qrsClient.Put("/qrs/app/" + newappid + "/replace", appqueries);
        }

        public void Delete(string appid)
        {
            qrsClient.Delete("/qrs/app/" + appid);
        }



        public string CreateTask(string appid, string appname, string taskname)
        {
            /// NEED TO CHECK THIS STILL WORKS after JSON OBJECT CHANGES
            string endpoint = "/qrs/reloadtask/create";

            ReloadObject task = new ReloadObject();
            task.task = new task();
            task.task.name = taskname;
            task.task.taskType = 0;
            task.task.enabled = true;
             
            task.task.app = new app();
            task.task.app.ID = appid;
            task.task.app.name = appname;
            
            string newtaskjsonin = JsonConvert.SerializeObject(task);

            string newtaskjsonout = qrsClient.Post(endpoint, newtaskjsonin);
            reloadtask result = (reloadtask)JsonConvert.DeserializeObject<reloadtask>(newtaskjsonout);
           
            return result.id;
        }


        private IApp GetAppHandle(string appid)
        {
            Uri uri = new Uri(url + ":443");
            ILocation remoteQlikSenseLocation = Qlik.Engine.Location.FromUri(uri);
            remoteQlikSenseLocation.AsNtlmUserViaProxy();
            IAppIdentifier appidentifier = remoteQlikSenseLocation.AppWithId(appid);
            return remoteQlikSenseLocation.App(appidentifier);
        }

        public List<IAppField> GetAppFields(app app)
        {
            IApp apphandle = GetAppHandle(app.ID);
            List<IAppField> appfields = AppExtensions.GetAppFields(apphandle).ToList();

            return appfields;
        }

        public List<string> GetFieldValues(app app, IAppField appField2)
        {
            List<string> strValues = new List<string>();

            Uri uri = new Uri(url + ":443");
            ILocation remoteQlikSenseLocation = Qlik.Engine.Location.FromUri(uri);
            remoteQlikSenseLocation.AsNtlmUserViaProxy();

            IAppIdentifier appidentifier = remoteQlikSenseLocation.AppWithId(app.ID);
            using (var doc = remoteQlikSenseLocation.App(appidentifier))
            {
                var field = doc.GetAppField(appField2.DimensionInfo.FallbackTitle);

                var p = new List<NxPage> { new NxPage { Height = 20, Width = 1 } };
                var dataPages = field.GetData(p);
                foreach (var dataPage in dataPages)
                {
                    var matrix = dataPage.Matrix;
                    foreach (var cellRows in matrix)
                    {
                        foreach (var cellRow in cellRows)
                        {
                            strValues.Add(cellRow.Text);
                            //Console.WriteLine("## " + cellRow.Text + " - " + cellRow.State);
                        }
                    }
                }

            }
            return strValues;
        }



        public void SetLoopAndReduceScript(string appid, string loopandreducevalue, string script)
        {
            script = script.Replace("<replace>", loopandreducevalue);

            IApp apphandle = GetAppHandle(appid);
            string mainscript = apphandle.GetScript();
            script = "///$tab LoopAndReduce\r\n" + script + "\r\n\r\n" + mainscript;
            apphandle.SetScript(script);
            apphandle.DoSave();
        }




    }

}
